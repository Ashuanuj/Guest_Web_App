{"ast":null,"code":"import { camelizeKeys, decamelizeKeys } from 'humps';\nimport fetch from 'isomorphic-fetch';\nimport qs from 'qs';\nexport default function callApi(endpoint, body, method, queryData, isFile = false, outside = false) {\n  console.log(body, method, 'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii');\n  const headers = new Headers();\n  const accessToken = localStorage.getItem('accessToken');\n  const passwordUpdatedAt = localStorage.getItem('passwordUpdatedAt');\n  let bodyData = body;\n  let queryParams = '';\n\n  if (queryData) {\n    queryParams = \"?\".concat(qs.stringify(queryData, {\n      encode: false,\n      indices: false\n    }));\n  }\n\n  if (!isFile) {\n    headers.append('content-type', 'application/json');\n    bodyData = JSON.stringify(decamelizeKeys(body));\n  }\n\n  if (accessToken) {\n    headers.append('Authorization', accessToken);\n    headers.append('passwordUpdatedAt', passwordUpdatedAt);\n  }\n\n  let URL = '206.189.143.249:70/'; //  if (outside)\n  //  {\n  //       URL = endpoint;\n  //  }\n  //  else\n  //  {\n\n  URL = \"\".concat(URL, \"/\").concat(endpoint).concat(queryParams); //  }\n\n  return fetch(URL, {\n    headers,\n    method: method || (body ? 'post' : 'get'),\n    mode: 'cors',\n    body: bodyData\n  }).then(response => response.json().then(json => ({\n    json,\n    response\n  }))).then(({\n    json,\n    response\n  }) => {\n    const camelizedJson = camelizeKeys(json);\n\n    if (!response.ok) {\n      if (json.logout !== undefined && json.logout.status !== undefined) {\n        try {\n          localStorage.removeItem('userId');\n          localStorage.removeItem('userName');\n          localStorage.removeItem('userImg');\n          localStorage.removeItem('userRoles');\n          localStorage.removeItem('userAppRoles');\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('voicelayerToken');\n          localStorage.removeItem('voicelayerId');\n          localStorage.removeItem('passwordUpdatedAt'); //  history.push(`/user`);\n\n          return true;\n        } catch (error) {\n          return false;\n        }\n      }\n\n      return Promise.reject(camelizedJson);\n    }\n\n    return camelizedJson.data;\n  });\n}","map":{"version":3,"sources":["/home/active40/Downloads/helius-app-actions/helius-app/src/utility/call-api.js"],"names":["camelizeKeys","decamelizeKeys","fetch","qs","callApi","endpoint","body","method","queryData","isFile","outside","console","log","headers","Headers","accessToken","localStorage","getItem","passwordUpdatedAt","bodyData","queryParams","stringify","encode","indices","append","JSON","URL","mode","then","response","json","camelizedJson","ok","logout","undefined","status","removeItem","error","Promise","reject","data"],"mappings":"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","sourcesContent":["import { camelizeKeys, decamelizeKeys } from 'humps';\nimport fetch from 'isomorphic-fetch';\nimport qs from 'qs';\n\nexport default function callApi(endpoint, body, method, queryData, isFile = false, outside = false) {\n     console.log(body, method, 'iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii')\n     const headers = new Headers();\n     const accessToken = localStorage.getItem('accessToken');\n     const passwordUpdatedAt = localStorage.getItem('passwordUpdatedAt');\n     let bodyData = body;\n     let queryParams = '';\n\n     if (queryData) {\n          queryParams = `?${qs.stringify(queryData, { encode: false, indices: false })}`;\n     }\n\n     if (!isFile) {\n          headers.append('content-type', 'application/json');\n          bodyData = JSON.stringify(decamelizeKeys(body));\n     }\n\n     if (accessToken) {\n          headers.append('Authorization', accessToken);\n          headers.append('passwordUpdatedAt', passwordUpdatedAt);\n     }\n\n     let URL = '206.189.143.249:70/';\n     //  if (outside)\n     //  {\n     //       URL = endpoint;\n     //  }\n     //  else\n     //  {\n           URL = `${URL}/${endpoint}${queryParams}`;\n     //  }\n\n\n     return fetch(URL, {\n          headers,\n          method: method || (body ? 'post' : 'get'),\n          mode: 'cors',\n          body: bodyData,\n     }).then(response => response.json().then(json => ({ json, response })))\n          .then(({ json, response }) => {\n               const camelizedJson = camelizeKeys(json);\n\n               if (!response.ok) {\n                    if (json.logout !== undefined && json.logout.status !== undefined) {\n                         try {\n                              localStorage.removeItem('userId');\n                              localStorage.removeItem('userName');\n                              localStorage.removeItem('userImg');\n                              localStorage.removeItem('userRoles');\n                              localStorage.removeItem('userAppRoles');\n                              localStorage.removeItem('accessToken');\n                              localStorage.removeItem('voicelayerToken');\n                              localStorage.removeItem('voicelayerId');\n                              localStorage.removeItem('passwordUpdatedAt');\n                              //  history.push(`/user`);\n                              return true;\n                         }\n                         catch (error) {\n                              return false;\n                         }\n                    }\n                    return Promise.reject(camelizedJson);\n               }\n\n               return camelizedJson.data;\n          });\n}"]},"metadata":{},"sourceType":"module"}