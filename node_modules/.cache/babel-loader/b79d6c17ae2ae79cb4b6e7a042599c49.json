{"ast":null,"code":"import { put, call, fork, take } from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport history from '../helper/history';\nexport function* LogIn(data) {\n  yield put(actions.LogIn.request());\n  console.log(\"submit------form\");\n\n  try {\n    console.log(data, 'WWWWWWWWWWWWWWWWWWWWWWWWW');\n\n    if (!data.name || !data.roomno || !data.dob) {\n      throw new Error({\n        error: {\n          customMessage: 'fields are mandatory.'\n        }\n      });\n    }\n\n    const response = yield call('http://localhost:3000/', data);\n    console.log(\"response---------->\", response);\n\n    if (response.user.length > 0) {\n      yield put(actions.initialize({\n        IS_LOGIN: true\n      }));\n      yield put(actions.LogIn.success(response));\n      yield call(history.push, '/dashboard');\n    } else {\n      yield put(actions.LogIn.failure({\n        customMessage: 'Access Denied.'\n      }));\n    }\n  } catch (_ref) {\n    let error = _ref.error;\n    yield put(actions.LogIn.failure(error));\n  }\n}\nexport function* watchLogIn() {\n  while (true) {\n    const _ref2 = yield take(actions.LOG_IN),\n          payload = _ref2.payload;\n\n    yield call(LogIn, payload);\n  }\n}\nexport default [fork(watchLogIn)];","map":{"version":3,"sources":["/media/mapper/Vani/helius-app/src/sagas/guestForm.js"],"names":["put","call","fork","take","actions","history","LogIn","data","request","console","log","name","roomno","dob","Error","error","customMessage","response","user","length","initialize","IS_LOGIN","success","push","failure","watchLogIn","LOG_IN","payload"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAAyBC,IAAzB,QAAoC,oBAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AAGQ,OAAO,UAAWC,KAAX,CAAiBC,IAAjB,EAAuB;AAC9B,QAAMP,GAAG,CAACI,OAAO,CAACE,KAAR,CAAcE,OAAd,EAAD,CAAT;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;;AACA,MAAI;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAiB,2BAAjB;;AACI,QAAI,CAACA,IAAI,CAACI,IAAN,IAAc,CAACJ,IAAI,CAACK,MAApB,IAA8B,CAACL,IAAI,CAACM,GAAxC,EAA6C;AAC7C,YAAM,IAAIC,KAAJ,CAAU;AAAEC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,aAAa,EAAE;AAAjB;AAAT,OAAV,CAAN;AACC;;AACD,UAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAAC,wBAAD,EAA2BM,IAA3B,CAA3B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCO,QAAlC;;AACA,QAAIA,QAAQ,CAACC,IAAT,CAAcC,MAAd,GAAuB,CAA3B,EAA6B;AACzB,YAAMnB,GAAG,CAACI,OAAO,CAACgB,UAAR,CAAmB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAnB,CAAD,CAAT;AACQ,YAAMrB,GAAG,CAACI,OAAO,CAACE,KAAR,CAAcgB,OAAd,CAAsBL,QAAtB,CAAD,CAAT;AACA,YAAMhB,IAAI,CAACI,OAAO,CAACkB,IAAT,EAAe,YAAf,CAAV;AACX,KAJD,MAKI;AACA,YAAMvB,GAAG,CAACI,OAAO,CAACE,KAAR,CAAckB,OAAd,CAAsB;AAAER,QAAAA,aAAa,EAAC;AAAhB,OAAtB,CAAD,CAAT;AACH;AAER,GAhBD,CAiBA,aAAkB;AAAA,QAATD,KAAS,QAATA,KAAS;AAClB,UAAMf,GAAG,CAACI,OAAO,CAACE,KAAR,CAAckB,OAAd,CAAsBT,KAAtB,CAAD,CAAT;AACC;AACA;AAED,OAAO,UAAWU,UAAX,GAAwB;AAC3B,SAAO,IAAP,EAAa;AAAA,kBACO,MAAMtB,IAAI,CAACC,OAAO,CAACsB,MAAT,CADjB;AAAA,UACLC,OADK,SACLA,OADK;;AAEL,UAAM1B,IAAI,CAACK,KAAD,EAAQqB,OAAR,CAAV;AACP;AACA;AAGb,eAAe,CACXzB,IAAI,CAACuB,UAAD,CADO,CAAf","sourcesContent":["import { put, call, fork,take} from 'redux-saga/effects';\nimport * as actions from '../actions';\nimport history from '../helper/history';\n\n\n        export function * LogIn(data) {\n        yield put(actions.LogIn.request());\n        console.log(\"submit------form\");\n        try {\n            console.log(data,'WWWWWWWWWWWWWWWWWWWWWWWWW')\n                if (!data.name || !data.roomno || !data.dob) {\n                throw new Error({ error: { customMessage: 'fields are mandatory.' } });\n                }\n                const response = yield call('http://localhost:3000/', data);\n                console.log(\"response---------->\",response);\n                if (response.user.length > 0){\n                    yield put(actions.initialize({ IS_LOGIN: true }));\n                            yield put(actions.LogIn.success(response));\n                            yield call(history.push, '/dashboard');\n                }\n                else{\n                    yield put(actions.LogIn.failure({ customMessage:'Access Denied.'}));\n                }\n                    \n        }\n        catch ({ error }) {\n        yield put(actions.LogIn.failure(error));\n        }\n        }\n\n        export function * watchLogIn() {\n            while (true) {\n            const { payload } = yield take(actions.LOG_IN);\n                    yield call(LogIn, payload);\n            }\n            }\n            \n\nexport default [\n    fork(watchLogIn)\n];"]},"metadata":{},"sourceType":"module"}