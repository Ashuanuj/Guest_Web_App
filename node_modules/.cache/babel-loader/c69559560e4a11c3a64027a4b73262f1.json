{"ast":null,"code":"import { camelizeKeys, decamelizeKeys } from 'humps';\nimport fetch from 'isomorphic-fetch';\nimport qs from 'qs';\nexport default function callApi(endpoint, body, method, queryData, isFile = false, outside = false) {\n  const headers = new Headers();\n  const accessToken = localStorage.getItem('accessToken');\n  const passwordUpdatedAt = localStorage.getItem('passwordUpdatedAt');\n  let bodyData = body;\n  let queryParams = '';\n\n  if (queryData) {\n    queryParams = \"?\".concat(qs.stringify(queryData, {\n      encode: false,\n      indices: false\n    }));\n  }\n\n  if (!isFile) {\n    headers.append('content-type', 'application/json');\n    bodyData = JSON.stringify(decamelizeKeys(body));\n  }\n\n  if (accessToken) {\n    headers.append('Authorization', accessToken);\n    headers.append('passwordUpdatedAt', passwordUpdatedAt);\n  }\n\n  let URL = '206.189.143.249:70/'; //  if (outside)\n  //  {\n  //       URL = endpoint;\n  //  }\n  //  else\n  //  {\n  //       URL = `${API_URL}/${endpoint}${queryParams}`;\n  //  }\n\n  return fetch(URL, {\n    headers,\n    method: method || (body ? 'post' : 'get'),\n    mode: 'cors',\n    body: bodyData\n  }).then(response => response.json().then(json => ({\n    json,\n    response\n  }))).then(({\n    json,\n    response\n  }) => {\n    const camelizedJson = camelizeKeys(json);\n\n    if (!response.ok) {\n      if (json.logout !== undefined && json.logout.status !== undefined) {\n        try {\n          localStorage.removeItem('userId');\n          localStorage.removeItem('userName');\n          localStorage.removeItem('userImg');\n          localStorage.removeItem('userRoles');\n          localStorage.removeItem('userAppRoles');\n          localStorage.removeItem('accessToken');\n          localStorage.removeItem('voicelayerToken');\n          localStorage.removeItem('voicelayerId');\n          localStorage.removeItem('passwordUpdatedAt'); //  history.push(`/user`);\n\n          return true;\n        } catch (error) {\n          return false;\n        }\n      }\n\n      return Promise.reject(camelizedJson);\n    }\n\n    return camelizedJson.data;\n  });\n}","map":{"version":3,"sources":["/home/ashu/Downloads/helius-app-actions/helius-app/src/utility/call-api.js"],"names":["camelizeKeys","decamelizeKeys","fetch","qs","callApi","endpoint","body","method","queryData","isFile","outside","headers","Headers","accessToken","localStorage","getItem","passwordUpdatedAt","bodyData","queryParams","stringify","encode","indices","append","JSON","URL","mode","then","response","json","camelizedJson","ok","logout","undefined","status","removeItem","error","Promise","reject","data"],"mappings":"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","sourcesContent":["import { camelizeKeys, decamelizeKeys } from 'humps';\nimport fetch from 'isomorphic-fetch';\nimport qs from 'qs';\n\nexport default function callApi(endpoint, body, method, queryData, isFile = false, outside = false)\n{\n     const headers = new Headers();\n     const accessToken = localStorage.getItem('accessToken');\n     const passwordUpdatedAt = localStorage.getItem('passwordUpdatedAt');\n     let bodyData = body;\n     let queryParams = '';\n\n     if (queryData)\n     {\n          queryParams = `?${qs.stringify(queryData, {encode: false, indices: false})}`;\n     }\n\n     if (!isFile)\n     {\n          headers.append('content-type', 'application/json');\n          bodyData = JSON.stringify(decamelizeKeys(body));\n     }\n\n     if (accessToken)\n     {\n          headers.append('Authorization', accessToken);\n          headers.append('passwordUpdatedAt', passwordUpdatedAt);\n     }\n\n     let URL = '206.189.143.249:70/';\n    //  if (outside)\n    //  {\n    //       URL = endpoint;\n    //  }\n    //  else\n    //  {\n    //       URL = `${API_URL}/${endpoint}${queryParams}`;\n    //  }\n\n\n     return fetch(URL, {\n          headers,\n          method: method || (body ? 'post' : 'get'),\n          mode: 'cors',\n          body: bodyData,\n     }).then(response => response.json().then(json => ({json, response})))\n             .then(({ json, response }) => {\n                  const camelizedJson = camelizeKeys(json);\n\n                  if (!response.ok)\n                  {\n                       if (json.logout !== undefined && json.logout.status !== undefined)\n                       {\n                            try\n                            {\n                                 localStorage.removeItem('userId');\n                                 localStorage.removeItem('userName');\n                                 localStorage.removeItem('userImg');\n                                 localStorage.removeItem('userRoles');\n                                 localStorage.removeItem('userAppRoles');\n                                 localStorage.removeItem('accessToken');\n                                 localStorage.removeItem('voicelayerToken');\n                                 localStorage.removeItem('voicelayerId');\n                                 localStorage.removeItem('passwordUpdatedAt');\n                                //  history.push(`/user`);\n                                 return true;\n                            }\n                            catch (error)\n                            {\n                                 return false;\n                            }\n                       }\n                       return Promise.reject(camelizedJson);\n                  }\n\n                  return camelizedJson.data;\n             });\n}"]},"metadata":{},"sourceType":"module"}